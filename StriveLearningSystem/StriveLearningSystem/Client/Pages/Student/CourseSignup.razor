@page "/courseRegistration"
@inject CoursesAgent _coursesAgent
@inject CoursesState  _coursesState
@inject UserAgent _userAgent

@inject IToaster Toaster

@if (_coursesvar == null)
{
    <p>Loading...</p>
}
else
{

    <h1>Course Management</h1>
    <h2>Courses</h2>
    <a href="/Payment"><button type="button" class="btn btn-primary">Pay for courses</button></a>
    <!--Course list-->
    <ul class="list-group" style="width:100%">
        <li class="list-group-item active">

            <div class="row">
                <div class="col">
                    <h5>Course ID</h5>
                </div>
                <div class="col">
                    <h5>Title</h5>
                </div>
                <div class="col">
                    <h5>Subject</h5>
                </div>
                <div class="col">
                    <h5>Course Description</h5>
                </div>
                <div class="col">
                    <h5>Location</h5>
                </div>
                <div class="col">
                    <h5>Meeting Days</h5>
                </div>
                <div class="col">
                    <h5>Credit Hours</h5>
                </div>
                <div class="col">
                    <h5>Teacher Name</h5>
                </div>
                <div class="col">
                    <h5></h5>
                </div>
            </div>
        </li>

        @foreach (var course in _coursesvar)
        {
            <li class="list-group-item">
                <div class="row">
                    <div class="col">
                        @course.CourseID
                    </div>
                    <div class="col">
                        @course.Title
                    </div>
                    <div class="col">
                        @course.Subject
                    </div>
                    <div class="col">
                        @course.Description
                    </div>
                    <div class="col">
                        @course.Location
                    </div>
                    <div class="col">
                        @course.MeetingDays
                    </div>
                    <div class="col">
                        @course.CreditHours
                    </div>
                    <div class="col">
                        @course.TeacherName
                    </div>


                    @if (!_registeredCourses.Select(m => m.CourseID).Contains(course.CourseID))
                    {

                        <div class="col">
                            <button class="btn-primary" @onclick="@(() => Register(course.CourseID))">Register</button>
                        </div>
                    }
                    else
                    {
                        <div class="col">
                            <button class="btn-primary" @onclick="@(() => RemoveRegistration(course.CourseID, this))">Unregister</button>
                        </div>
                    }

                </div>
            </li>

        }

    </ul>


}

@code
{
    private List<CourseInformationDTO> _coursesvar;
    private List<Course> _registeredCourses;
    private List<User> _teachers;

    protected override async Task OnInitializedAsync()
    {
        _coursesvar = await _coursesAgent.getCourses();
        await _coursesState.LoadCourses();

        _registeredCourses = _coursesState.Courses;

    }

    private async Task Register(int courseID)
    {
        await _coursesAgent.registerStudentForCourse(courseID);
        await _coursesState.RefreshCourses();
        Toaster.Success("Successfully registered");
        _registeredCourses = _coursesState.Courses;
        this.StateHasChanged();
    }

    private async Task RemoveRegistration(int courseID, StriveLearningSystem.Client.Pages.Student.CourseSignup page)
    {

        await _coursesAgent.dropStudentCourseRegistration(courseID);
        await _coursesState.RefreshCourses();
        Toaster.Success("Succesfully unregistered");
        _registeredCourses = _coursesState.Courses;
        this.StateHasChanged();
    }



}

