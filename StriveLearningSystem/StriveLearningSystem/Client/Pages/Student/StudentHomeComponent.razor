@inject CoursesAgent  _coursesAgent
@inject CoursesState _coursesState

<style>
    .coursesGroup {
        padding: 5px;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(325px, 1fr));
        grid-gap: 1rem;
    }

    .courseCard {
    }
</style>

@if (Courses == null)
{
    <p>Loading...</p>
}
else
{
    <h1>Student Homepage</h1>
    <h2>Current courses</h2>
    <div>
        <div class="coursesGroup">
            @foreach (var course in Courses)
            {
                <a href="/course/@course.CourseID" class="courseCard">
                    <div class="card">
                        <div class="card-header">
                            <b>Course Id - @course.CourseID : @course.Title</b>
                        </div>
                        <div class="card-body">
                            <b>Description:</b> <p>@course.Description</p>
                        </div>

                    </div>
                </a>
            }
        </div>

        <a href="/courseRegistration" >
            Register or Drop Classes
        </a>
    </div>
}

@if (_assignmentsvar == null)
{
    <p>Loading...</p>
}
else
{
    <h2>To Do List:</h2>
    <ul class="list-group" style="width:75%">
        <li class="list-group-item active">

            <div class="row">
                <div class="col">
                    <h5>Assignment ID</h5>
                </div>
                <div class="col">
                    <h5>Assignment Type</h5>
                </div>
                <div class="col">
                    <h5>Assignment Description</h5>
                </div>
                <div class="col">
                    <h5>Due Date</h5>
                </div>
            </div>
        </li>
        @foreach (var assignment in _assignmentsvar)
        {
            @if (assignment.DueDate < wfn)
            {
                <a href="student/assignmentpage/@assignment.AssignmentID" class="list-group-item list-group-item-action">

                    <div class="row">
                        <div class="col">
                            @assignment.AssignmentID
                        </div>
                        <div class="col">
                            @assignment.AssignmentType
                        </div>
                        <div class="col">
                            @assignment.AssignmentDescription
                        </div>
                        <div class="col">
                            @assignment.DueDate
                        </div>
                    </div>
                </a>
            }
        }
    </ul>
}

@if (_announcementsvar == null)
{
    <p>Loading...</p>
}
else
{
    <h2>Announcements:</h2>
    <ul class="list-group" style="width:75%">
        <li class="list-group-item active">

            <div class="row">
                <div class="col">
                    <h5>Announcement ID</h5>
                </div>
                <div class="col">
                    <h5>Title</h5>
                </div>
                <div class="col">
                    <h5>Body</h5>
                </div>
                <div class="col">
                    <h5>Date Created</h5>
                </div>
            </div>
        </li>
        @foreach (var announcement in _announcementsvar)
        {
            <a class="list-group-item list-group-item-action">

                <div class="row">
                    <div class="col">
                        @announcement.AnnouncementID
                    </div>
                    <div class="col">
                        @announcement.Title
                    </div>
                    <div class="col">
                        @announcement.Body
                    </div>
                    <div class="col">
                        @announcement.DateCreated
                    </div>
                </div>
            </a>
        }
    </ul>
}

<StudentCalendarComponent></StudentCalendarComponent>



@code {
    public List<Course> Courses;
    private List<Assignment> _assignmentsvar;
    private List<Announcement> _announcementsvar;
    private DateTime currDate;
    private DateTime wfn;

    protected override async Task OnInitializedAsync()
    {

        _assignmentsvar = await _coursesAgent.GetAssignmentsByStudent();



        _announcementsvar = await _coursesAgent.GetAnnouncementsByStudent();
        await _coursesState.LoadCourses();
        Courses = _coursesState.Courses;

        currDate = DateTime.Now;
        wfn = currDate.AddDays(7);
    }



}
