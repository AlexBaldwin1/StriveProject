@inject GradeAgent _gradeAgent

@if (Data.Count > 0)
{
    <BarChartComponent Data="Data" Labels="Labels"></BarChartComponent>

}


@code {
    [Parameter] public int AssignmentId { get; set; }
    [Parameter] public int TotalScore { get; set; }

    List<int> Data = new List<int>();
    List<string> Labels = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var grades = await _gradeAgent.GetGradesByAssignment(AssignmentId);

        List<string> gradeRanges = new List<string>() { "0-50%", "50-60%", "60-70%", "70-80%", "80-90%", "90-100%", "100%+" };
        List<int> gradesDividedIntoRanges = new List<int>();

        gradesDividedIntoRanges.Add(grades.Where(m => m < (TotalScore * 0.5)).Count());
        gradesDividedIntoRanges.Add(grades.Where(m => m < (TotalScore * 0.6) && m >= (TotalScore * 0.5)).Count());
        gradesDividedIntoRanges.Add(grades.Where(m => m < (TotalScore * 0.7) && m >= (TotalScore * 0.6)).Count());
        gradesDividedIntoRanges.Add(grades.Where(m => m < (TotalScore * 0.8) && m >= (TotalScore * 0.7)).Count());
        gradesDividedIntoRanges.Add(grades.Where(m => m < (TotalScore * 0.9) && m >= (TotalScore * 0.8)).Count());
        gradesDividedIntoRanges.Add(grades.Where(m => m < (TotalScore) && m >= (TotalScore * 0.9)).Count());
        gradesDividedIntoRanges.Add(grades.Where(m => m >= (TotalScore)).Count());

        Data = gradesDividedIntoRanges;
        Labels = gradeRanges;
    }
}